Happy number or not:

#4,16,37,58,89,145
def happy(n):
    s=r=0
    while(n>=0):
        for i in range(0,len(str(n))+1):
            r=n%10
            s=s+r**2
            n=n//10
        return s
n=int(input("Enter the number:"))
res=n
while (res!=1 and res!=4):
    res=happy(res)
if(res==1):
    print("Happy number")
else:
    print("Not a happy number")
        

Encapsulation example:

#protected _
class  encap:
    _a=10
    c=20
    def encapfunction(self):
        _b=200
        print("Encap function-accessing protected")
        print(self._a+10)
obj=encap()
print(obj._a)
obj.encapfunction()
print(obj.c)

#private __
class encap:
    __a=10
    print(__a)
    def encapfunction(self):
        print("Encap function")
        print(self.__a)
obj=encap()
obj.encapfunction()
print(obj.__a)

polymorphism:

#Method overloading
class moverload:
    def display(self,a=None,b=None):
        print(a,b)
obj=moverload()
print("without arguments")
obj.display()
print("with all arguments")
obj.display(5,6)
print("with one argument")
obj.display(60)

Overriding1:

class kkd():
    def placename(self):
        print("kkd placename is a jntuk")
    def student(self):
        print("Yes-kkd")
    def which_year(self):
        print("3rd year")
class hyd():
    def placename(self):
        print("hyd placename is a jntu")
    def student(self):
        print("Yes-hyd")
    def which_year(self):
        print("3rd year")
obj_kkd=kkd()
obj_hyd=hyd()
for details in(obj_kkd,obj_hyd):
    details.placename()
    details.student()
    details.which_year()

2:

class parent():
    #constructor
    def __init__(self):
        self.value="Inside Parent"

    #parent's show method
    def show(self):
        print(self.value)
#Defining child class
class child(parent):
    #constructor
    def __init__(self):
        self.value="Inside Child"

    #Child's show method
    def show(self):
        print(self.value)
obj1=parent()
obj2=child()
obj1.show()
obj2.show()

linked list creation:

#creating NODE-declaration and definition
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelinkedlist:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("LInked list is empty")
        else:
            temp=self.head#temp =first node
            while temp:
                print(temp.data,"->",end=" ")
                #temp.data means first node's data
                temp=temp.next#estabilishing link
obj=singlelinkedlist()
#node creation - intialising
n=Node(10) #so n.data in node class will be 10
obj.head=n #assigning first node as head
n1=Node(20)
obj.head.next=n1  #next node value
n2=Node(300)
n1.next=n2
obj.display()

#winner
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class linkedlist:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("LInked list is empty")
        else:
            temp=self.head#temp =first node
            while temp:
                print(temp.data,end=" ")
                #temp.data means first node's data
                temp=temp.next#estabilishing link
obj=linkedlist()
#node creation - intialising
n=Node("w") #so n.data in node class will be 10
obj.head=n #assigning first node as head
n1=Node("i")
obj.head.next=n1  #next node value
n2=Node("n")
n1.next=n2
n3=Node("n")
n2.next=n3
n4=Node("n")
n3.next=n4
n5=Node("e")
n4.next=n5
n6=Node("r")
n5.next=n6
obj.display()

insert begining:

class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlell:
    def __init__(self):
        self.head=None
    def insert_begining(self,data):
        nb=node(data)
        nb.next=self.head
        self.head=nb
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,end=" ")
                temp=temp.next
obj=singlell()
n=node(10)
obj.head=n
n1=node(20)
n.next=n1
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
print("Before inserting  100")
obj.display()
print("")
print("After inserting  100")
obj.insert_begining(100)
obj.display()
print("")
print("After inserting  555")
obj.insert_begining(555)
obj.display()

INSERT AT END:


class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlell:
    def __init__(self):
        self.head=None
    def insert_end(self,data):
        ne=node(data)
        temp=self.head
        while temp.next:
            temp=temp.next
        temp.next=ne          
    def display(self):
         if self.head is None:
            print("Linked list is empty")
         else:
            temp=self.head
            while temp:
                print(temp.data,end=" ")
                temp=temp.next
obj=singlell()
n=node(10)
obj.head=n
n1=node(20)
n.next=n1
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
print("Before inserting  100")
obj.display()
print("")
print("After inserting  100")
obj.insert_end(100)
obj.display()
print("")
print("After inserting  555")
obj.insert_end(555)
obj.display()

insert at the position:


class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlell:
    def __init__(self):
        self.head=None
    def insert_position(self,pos,data):
        np=node(data)
        temp=self.head
        for i in range(pos-1):
            temp=temp.next
        np.next=temp.next
        temp.next=np
    def display(self):    
         if self.head is None:
            print("Linked list is empty")
         else:
            temp=self.head
            while temp:
                print(temp.data,end=" ")
                temp=temp.next
obj=singlell()
n=node(10)
obj.head=n
n1=node(20)
n.next=n1
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
obj.display()
print("")
obj.insert_position(4,555)
obj.display()


class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlell:
    def __init__(self):
        self.head=None
        self.last_node=None
    def append(self,data):
        if self.last_node is None:
            self.head= node(data)
            self.last_node=self.head
        else:
            self.last_node.next=node(data)
            self.last_node=self.last_node.next
    def display(self):
        current=self.head
        while current is not None:
            print(current.data,end=' ')
            current=current.next
a_llist=singlell()
n=int(input("How many elements wanted"))
for i in range(n):
      data=int(input("Enter data element:"))
      a_llist.append(data)
print("The linked list:",end=" ")
a_llist.display()
        
            
            
            




        

       
        
        










