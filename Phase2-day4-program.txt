STACK-PUSH,POP,CHECKING WEHTHER STACK IS EMPTY:

#STACK IS LIFO-LAST IN FISRT OUT
stack=[]
def push():
    element= int(input("Enter the element:"))
    stack.append(element)
    print(stack)
def pop_element():
    if not stack:
        print("Stack is empty")
    else:
        e=stack.pop()
        print("Removed element:",e)
        print(stack)
while True:
    print("Select operation 1.push 2.pop 3.quit")
    choice=int(input())
    if choice==1:
        push()
    elif choice==2:
        pop_element()
    elif choice==3:
        break
    else:
        print("Enter the correct operation")
 
	STACK USING LINKED LIST:   

class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class stack:
    def __init__(self):
        self.head=None
    def isempty(self):
        if self.head==None:
            return True
        else:
            return False
    def push(self,data):
        if self.head==None:
            self.head=node(data)
        else:
            newnode=node(data)
            newnode.next=self.head
            self.head=newnode
                
    def pop(self):
        if self.isempty():
            return None
        else:
            poppednode=self.head
            self.head=self.head.next
            poppednode.next=None
            return poppednode.data
    def peek(self):
        if self.isempty():
            return None
        else:
            return self.head.data
        
                
    def display(self):
        t=self.head
        if self.isempty():
            print("Stack Underflow")
        else:
            while(t!=None):
                print(t.data,end="")
                t=t.next
                if(t!=None):
                    print("->",end="")
            return
if __name__=="__main__":
    s=stack()
    s.push(100)
    s.push(400)
    s.push(600)
    s.push(500)
    s.display()
    print(" ")
    print(s.peek())
    s.pop()
    s.pop
    s.display()

BALANCED PARANTHEIS:

s=input()
st=[]
balanced=True
for char in s:
    if(char=='{' or char=='[' or char=='('):
        st.append(char)
    elif(char=='}'):
        if(len(st) and st.pop()!='{'):
            balanced=False
            break
    elif(char== ']'):
        if(len(st) and st.pop()!='['):
            balanced=False
            break
    elif(char==')'):
        if(len(st) and st.pop()!='('):
            balanced=False
            break
    else:
        balanced=False
        break
if(balanced==False or len(st)):
    print("Not balanced")
else:
    print("Balanced")


#Queue program

queue=[]
def enqueue():
    element=input("Enter the element:")
    queue.append(element)
    
def dequeue():
    if not queue:
        print("Q is empty")
    else:
        e=queue.pop(0)
        print("Removed element:",e)
def display():
    print(queue)
while True:
    print("Select operation 1.add 2.remove 3.show 4.quit")
    choice=int(input())
    if choice==1:
        enqueue()
    elif choice==2:
        dequeue()
    elif choice==3:
        display()
    elif choice==4:    
        break
    else:
        print("Enter the correct operation")


QUEUE MODULE-STACK:

from queue import LifoQueue
s=LifoQueue(maxsize=3)
print(s.qsize())
s.put(1)
s.put(2)
s.put(3)
print(s.full())
print(s.qsize())
print(s.get())
print(s.get())
print(s.get())
print(s.empty())

QUEUE USING QUEUE MODULE:

import queue
l=queue.Queue(maxsize=5)
l.put(20)
l.put(40)
print(l.get())
print(l.get())


QUEUE USING LINKEDLIST:

 class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class queue:
    def __init__(self):
        self.head=None
        self.last=None
    def enqueue(self,data):
        if self.last is None:
            self.head=node(data)
            self.last=self.head
        else:
            self.last.next=node(data)
            self.last=self.last.next
    def dequeue(self):
        if self.head is None:
            return None
        else:
            toreturn=self.head.data
            self.head=self.head.next
            return toreturn
aqueue=queue()
while True:
    print('enqueue <value>')
    print('dequeue')
    print('quit')
    #by using split,do will become a list,split works with string
    do=input('What would you like to do?').split()
    operation=do[0].strip().lower()
    if operation=='enqueue':
        aqueue.enqueue(int(do[1]))
    elif operation=='dequeue':
        dequeued=aqueue.dequeue()
        if dequeued is None:
            print('Queue is empty')
        else:
            print('Dequeued elements:',int(dequeued))
    elif operation=='quit':
        break


class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class ll:
    def __init__(self):
        self.head=None
        self.last_node=None
    def append(self,data):
        if self.last_node is None:
            self.head=node(data)
            self.last_node=self.head
        else:
            self.last_node.next=node(data)
            self.last_node=self.last_node.next
    def get_prev_node(self,ref_node):
        current=self.head
        while(current and current.next!=ref_node):
            current=current.next
        return current
    def remove(self,node):
        prev_node=self.get_prev_node(node)
        if prev_node is None:
            self.head=self.head.next
        else:
            prev_node.next=node.next
    def display(self):
        current=self.head
        while current:
            print(current.data,end=' ')
            current=current.next
def remove_duplicates(llist):
    current1=llist.head
    while current1:
        data=current1.data
        current2=current1.next
        while current2:
            if current2.data==data:
                llist.remove(current2)
            current2=current2.next
        current1=current1.next
a_llist=ll()
data_list=input('Please enter the elements in the linkedlist:').split()
for data in data_list:
    a_llist.append(int(data))
remove_duplicates(a_llist)
print('The list with duplicates removed:')
a_llist.display()
    
    
        

                       
        
  

            
        

                        
                    
